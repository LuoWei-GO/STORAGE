
.rela.dyn
.rela.plt
.plt
.plt.got
.got
.got.plt


-Wl,-z now
-Wl,-Bsymbolic

何为动态链接
把链接的过程推迟到了运行时再进行

为什么要动态链接
程序每次被装载时都要重新进行链接，会导致程序损失一些运行性能

编译器不知道函数的具体地址，
如果符号是一个定义在其他静态目标模块中的函数，链接器会按照静态链接的规则，将函数地址引用重定位。如果是一个定义在某个动态共享对象中的函数，链接器会将这个符号的引用标记为一个动态链接的符号，不对它进行地址重定位，把这个过程留到装载时再进行。

链接器如何知道函数的引用是一个静态符号还是一个动态符号？
so中保存了完整的符号信息，链接器在解析符号时就可以知道符号时定义在哪里的。

动态链接器会映射到进程的地址空间，在系统开始运行二进制之前，首先会将控制权交给动态链接器，由它完成所有的动态链接工作，然后把控制权交还给进程。

共享对象的最终装载地址在编译时是不确定的。

链接时重定位，装载时重定位。

地址无关代码 -fPIC
程序模块中共享的指令部分在装载时不需要因为装载地址的改变而改变，把指令中那些需要被修改的部分分离出来，跟数据放在一起。


模块内部的函数调用、跳转
位置相对固定，不需要重定位

全剧符号介入

模块内部的数据访问



模块外部的函数调用、跳转
模块外部的数据访问
目标地址要等到模块装载后才决定。
在数据段里建立一个指向这些变量的指针数据，全局偏移表GOT。

计算出变量地址在GOT中的位置，然后使用寄存器间接寻址方式访问变量。


ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量。

延迟绑定PLT


对于全局和静态的数据访问都要进行复杂的GOT定位，然后间接寻址。对于模块间的调用也要先定位GOT，然后再进行间接跳转。
动态链接在运行时完成，即程序开始执行时，动态链接器都要进行一次链接工作。寻找并装载所需要的共享对象，然后进行符号查找地址重定位等工作。势必减慢程序的启动速度。

可能很多函数在程序执行过程中都不会被用到，如果一开始就把所有函数都链接好实际上是一种浪费。
当函数第一次被用到时才进行绑定。
当调用某个外部模块等函数时，通常应该是通过GOT中相应的项进行简介跳转。PLT在这个过程中又增加了一层跳转。调用函数并不直接通过GOT跳转，而是通过PLT项的结构进行跳转。


func@plt的第一条指令是一条通过GOT简介跳转的指令。func@GOT表示GOT中保存函数的项。
链接器在初始化阶段并没有将函数地址填入func@GOT中，而是将一个push n。第一条指令的效果是跳转到第二条指令，第二条指令将一个数字n压栈。
数字是符号引用在重定位表。rela.plt中的下标。
然后将模块ID压栈。
然后跳转到 \_dl_runtime_resolve。完成符号解析和重定位操作，将符号地址填入func@GOT。
一旦函数被解析完毕，再次调用func@plt时，第一条jmp指令就可以跳转到真正的函数中，不会再执行第二条指令开始的代码。

将GOT拆分成了.got和.got.plt。.got保存全局变量的地址，.got.plt保存函数引用的地址。


在映射完可执行文件后，启动动态链接器，将控制权交给动态链接器。ld执行自身初始化，然后对可执行文件进行动态链接。
.interp保存动态链接器的路径。
.dynamic保存了动态链接器所需要的基本信息。依赖哪些共享对象，动态链接符号表的位置，动态链接重定位表的位置，共享对象初始化代码的地址。
readelf -d
.symtab 保存所有关于该目标文件的符号的定义和应用。
.dynsym只保存了与动态链接相关的内容。对于模块内部，比如模块私有变量则不保存。依赖.dynstr保存符号名。


.rela.text表示代码段的重定位，.rela.data表示数据段的重定位。obj
.rela.dyn对数据引用的修正，修正的位置位于.got。
.rela.plt对函数引用的修正，修正的位置位于.got.plt。

ld进行重定位时，首先查找函数地址，将地址填入.got.plt中。

全局符号介入：一个so里的全局符号被另一个so里的同名全局符号覆盖。
当一个符号需要被加入到全局符号表时，如果相同的符号名已经存在，则后加入的符号被忽略。
ld使用广度优先的顺序加载模块：先加载可执行文件，然后加载所有可执行文件依赖的所有的so，然后加载这些so依赖的so，知道所有依赖都被加载。

ld编译可执行文件和so的重定位表，将GOT/PLT中的每个需要重定位的位置进行修正。

显示运行时链接。让程序在运行时加载制定的模块。
dlopen：
查找环境变量LD_LIBRARY_PATH指定的一系列目录。
查找/etc/ld.so.cache指定的so路径。
查找/lib、/usr/lib
flag：RTLD_LAZY延迟绑定，当函数第一次被用到时才进行绑定。RTLD_NOW模块加载时完成所有的函数绑定工作。如果绑定没法完成返回错误。RTLD_GLOBAL表示so的全局符号合并到进程的全局符号表中，以后加载的so可以使用这些符号。

